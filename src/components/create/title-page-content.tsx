'use client';

import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Link from 'next/link';
import Image from 'next/image';
import { ArrowLeft, ArrowRight, Upload, Sparkles, Image as ImageIcon, Wand2 } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { FileUpload } from '@/components/ui/file-upload';
import { LoadingSpinner } from '@/components/ui/loading-spinner';
import { toast } from 'sonner';
import { LIMITS, THEMES } from '@/lib/constants';

export function TitlePageContent() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const mode = searchParams.get('mode') || 'ai-assisted'; // 'ai-assisted' or 'custom'
  const theme = searchParams.get('theme');
  
  const [titleImage, setTitleImage] = useState<File | null>(null);
  const [titleImageUrl, setTitleImageUrl] = useState<string>('');
  const [heroName, setHeroName] = useState('');
  const [prompt, setPrompt] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedSample, setGeneratedSample] = useState<any>(null);

  // Pre-fill prompt based on theme selection
  useEffect(() => {
    if (theme && mode === 'ai-assisted') {
      const selectedTheme = THEMES.find(t => t.slug === theme);
      if (selectedTheme) {
        setPrompt(`Create a ${selectedTheme.name.toLowerCase()} story for children. ${selectedTheme.description}. Make it engaging and age-appropriate with the hero as the main character.`);
      }
    } else if (mode === 'custom') {
      setPrompt('Create a custom story using the uploaded image. I want to have full control over the content and will provide my own text for each page.');
    }
  }, [theme, mode]);

  const handleImageUpload = (files: File[]) => {
    if (files.length > 0) {
      const file = files[0];
      setTitleImage(file);
      setTitleImageUrl(URL.createObjectURL(file));
      toast.success('Title image uploaded');
    }
  };

  const removeImage = () => {
    setTitleImage(null);
    setTitleImageUrl('');
    toast.success('Image removed');
  };

  const generateSample = async () => {
    if (!titleImage) {
      toast.error('Please upload a title image first');
      return;
    }

    if (mode === 'ai-assisted' && !heroName.trim()) {
      toast.error('Please provide a hero name for your story');
      return;
    }

    if (mode === 'custom' && !prompt.trim()) {
      toast.error('Please provide a description for your story');
      return;
    }

    if (mode === 'custom' && prompt.length < LIMITS.PROMPT_MIN_LENGTH) {
      toast.error(`Description must be at least ${LIMITS.PROMPT_MIN_LENGTH} characters`);
      return;
    }

    setIsGenerating(true);
    try {
      // TODO: Integrate with OpenAI API
      // For now, simulate the API call
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      const finalPrompt = mode === 'ai-assisted' && prompt 
        ? prompt.replace('the hero', heroName || 'the hero')
        : prompt;

      const sampleData = {
        id: `sample-${Date.now()}`,
        title: mode === 'ai-assisted' ? `${heroName || 'Hero'}'s Adventure` : 'Your Amazing Story',
        coverImage: titleImageUrl,
        samplePages: [
          {
            id: 'cover',
            type: 'cover',
            title: mode === 'ai-assisted' ? `${heroName || 'Hero'}'s Adventure` : 'Your Amazing Story',
            text: 'A wonderful adventure awaits...',
            imageUrl: titleImageUrl,
          },
          {
            id: 'page-1',
            type: 'content',
            text: mode === 'ai-assisted' 
              ? `Once upon a time, ${heroName || 'our hero'} discovered a magical place filled with wonder and excitement...`
              : 'Once upon a time, in a magical place filled with wonder and excitement, our adventure begins...',
            imageUrl: '/api/generated-image-1.jpg', // Would be generated by AI
          },
          {
            id: 'page-2',
            type: 'content', 
            text: mode === 'ai-assisted'
              ? `The journey takes an unexpected turn as ${heroName || 'our hero'} discovers something truly extraordinary...`
              : 'The journey takes an unexpected turn as our heroes discover something truly extraordinary...',
            imageUrl: '/api/generated-image-2.jpg', // Would be generated by AI
          },
        ],
        prompt: finalPrompt,
        heroName: mode === 'ai-assisted' ? heroName : undefined,
        mode,
        theme,
        createdAt: new Date().toISOString(),
      };

      setGeneratedSample(sampleData);
      
      // Save the sample for later use
      sessionStorage.setItem('story_sample', JSON.stringify(sampleData));
      sessionStorage.setItem('title_image', titleImageUrl);
      
      toast.success('Sample story generated! Review it below.');
    } catch (error) {
      toast.error('Failed to generate sample. Please try again.');
    } finally {
      setIsGenerating(false);
    }
  };

  const proceedToNextStep = () => {
    if (!generatedSample) {
      toast.error('Please generate a sample first');
      return;
    }

    if (mode === 'ai-assisted') {
      // For AI-assisted, go to theme selection first
      router.push(`/create/theme?sampleId=${generatedSample.id}&mode=${mode}`);
    } else {
      // For custom, go directly to payment
      router.push(`/create/payment?sampleId=${generatedSample.id}&mode=${mode}`);
    }
  };

  const selectedTheme = theme ? THEMES.find(t => t.slug === theme) : null;

  return (
    <div className="space-y-8 max-w-4xl mx-auto">
      {/* Header */}
      <div className="flex items-center gap-4">
        <Button variant="ghost" size="sm" asChild>
          <Link href={mode === 'ai-assisted' && theme ? `/create/theme?mode=${mode}` : '/create'}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            {mode === 'ai-assisted' && theme ? 'Back to Themes' : 'Back to Create'}
          </Link>
        </Button>
        <div className="flex-1">
          <h1 className="text-3xl font-bold tracking-tight">
            {mode === 'ai-assisted' ? 'Create Your Hero' : 'Upload Title Image'}
          </h1>
          <p className="text-muted-foreground">
            {mode === 'ai-assisted' 
              ? 'Upload your hero\'s image and provide their name to generate a story preview'
              : 'Upload an image and describe your story idea to generate a preview'
            }
          </p>
        </div>
      </div>

      {/* Progress indicator */}
      <div className="flex items-center justify-center space-x-4">
        {mode === 'ai-assisted' && theme ? (
          // New AI-assisted workflow with theme already selected
          <>
            <div className="flex items-center">
              <div className="w-8 h-8 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-sm font-bold">
                âœ“
              </div>
              <span className="ml-2 text-sm text-primary font-medium">Theme Selected</span>
            </div>
            <div className="w-16 h-px bg-border"></div>
            <div className="flex items-center">
              <div className="w-8 h-8 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-sm font-bold">
                2
              </div>
              <span className="ml-2 text-sm font-medium text-primary">Hero & Generate</span>
            </div>
            <div className="w-16 h-px bg-border"></div>
            <div className="flex items-center">
              <div className="w-8 h-8 rounded-full bg-muted text-muted-foreground flex items-center justify-center text-sm font-bold">
                3
              </div>
              <span className="ml-2 text-sm text-muted-foreground">Review & Pay</span>
            </div>
            <div className="w-16 h-px bg-border"></div>
            <div className="flex items-center">
              <div className="w-8 h-8 rounded-full bg-muted text-muted-foreground flex items-center justify-center text-sm font-bold">
                4
              </div>
              <span className="ml-2 text-sm text-muted-foreground">Complete Book</span>
            </div>
          </>
        ) : (
          // Custom mode or legacy workflow
          <>
            <div className="flex items-center">
              <div className="w-8 h-8 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-sm font-bold">
                1
              </div>
              <span className="ml-2 text-sm font-medium text-primary">Upload & Generate</span>
            </div>
            <div className="w-16 h-px bg-border"></div>
            <div className="flex items-center">
              <div className="w-8 h-8 rounded-full bg-muted text-muted-foreground flex items-center justify-center text-sm font-bold">
                2
              </div>
              <span className="ml-2 text-sm text-muted-foreground">Review & Pay</span>
            </div>
            <div className="w-16 h-px bg-border"></div>
            <div className="flex items-center">
              <div className="w-8 h-8 rounded-full bg-muted text-muted-foreground flex items-center justify-center text-sm font-bold">
                3
              </div>
              <span className="ml-2 text-sm text-muted-foreground">Create Full Story</span>
            </div>
          </>
        )}
      </div>

      {/* Mode and Theme Info */}
      {(mode || selectedTheme) && (
        <Card className="border-primary/20 bg-primary/5">
          <CardContent className="p-4">
            <div className="flex items-center gap-4 text-sm">
              <div className="flex items-center gap-2">
                <span className="font-medium">Mode:</span>
                <span className="capitalize">{mode.replace('-', ' ')}</span>
              </div>
              {selectedTheme && (
                <div className="flex items-center gap-2">
                  <span className="font-medium">Theme:</span>
                  <span>{selectedTheme.name}</span>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      )}

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Left Column - Upload & Input */}
        <div className="space-y-6">
          {/* Image Upload */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <ImageIcon className="h-5 w-5" />
                Title Image
              </CardTitle>
            </CardHeader>
            <CardContent>
              {titleImageUrl ? (
                <div className="space-y-4">
                  <div className="aspect-[4/3] bg-muted rounded-lg overflow-hidden">
                    <Image 
                      src={titleImageUrl} 
                      alt="Title image"
                      width={300}
                      height={200}
                      className="w-full h-full object-cover"
                    />
                  </div>
                  <div className="flex gap-2">
                    <Button
                      variant="outline"
                      onClick={() => {
                        const input = document.createElement('input');
                        input.type = 'file';
                        input.accept = 'image/*';
                        input.onchange = (e) => {
                          const files = (e.target as HTMLInputElement).files;
                          if (files) handleImageUpload(Array.from(files));
                        };
                        input.click();
                      }}
                    >
                      <Upload className="h-4 w-4 mr-2" />
                      Replace Image
                    </Button>
                    <Button variant="outline" onClick={removeImage}>
                      Remove
                    </Button>
                  </div>
                </div>
              ) : (
                <FileUpload
                  onFileSelect={handleImageUpload}
                  maxFiles={1}
                  maxSize={LIMITS.MAX_IMAGE_SIZE}
                  accept={{ 'image/*': ['.png', '.jpg', '.jpeg'] }}
                />
              )}
            </CardContent>
          </Card>

          {/* Hero Name (AI-assisted only) */}
          {mode === 'ai-assisted' && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Wand2 className="h-5 w-5" />
                  Hero Details
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="hero-name">Hero Name *</Label>
                  <Input
                    id="hero-name"
                    value={heroName}
                    onChange={(e) => setHeroName(e.target.value)}
                    placeholder="Enter the hero's name (e.g., Alex, Emma, Max)..."
                    className="mt-2"
                  />
                </div>
                
                {theme && (
                  <div>
                    <Label htmlFor="prompt">Story Theme (Optional - Customize if needed)</Label>
                    <Textarea
                      id="prompt"
                      value={prompt}
                      onChange={(e) => setPrompt(e.target.value)}
                      placeholder="The default theme prompt will be used if left empty..."
                      className="min-h-[80px] mt-2"
                      maxLength={LIMITS.PROMPT_MAX_LENGTH}
                    />
                    <div className="text-sm text-muted-foreground mt-2">
                      {prompt.length}/{LIMITS.PROMPT_MAX_LENGTH} characters
                    </div>
                  </div>
                )}

                <Button 
                  onClick={generateSample}
                  disabled={!titleImage || !heroName.trim() || isGenerating}
                  className="w-full"
                  size="lg"
                >
                  {isGenerating ? (
                    <>
                      <LoadingSpinner className="h-4 w-4 mr-2" />
                      Generating Sample...
                    </>
                  ) : (
                    <>
                      <Sparkles className="h-4 w-4 mr-2" />
                      Generate Story Sample
                    </>
                  )}
                </Button>
              </CardContent>
            </Card>
          )}

          {/* Story Description (Custom mode only) */}
          {mode === 'custom' && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Wand2 className="h-5 w-5" />
                  Story Description
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="prompt">Describe your story idea *</Label>
                  <Textarea
                    id="prompt"
                    value={prompt}
                    onChange={(e) => setPrompt(e.target.value)}
                    placeholder="Describe what kind of story you want to create with this image..."
                    className="min-h-[120px] mt-2"
                    maxLength={LIMITS.PROMPT_MAX_LENGTH}
                  />
                  <div className="text-sm text-muted-foreground mt-2">
                    {prompt.length}/{LIMITS.PROMPT_MAX_LENGTH} characters
                  </div>
                </div>

                <Button 
                  onClick={generateSample}
                  disabled={!titleImage || !prompt.trim() || isGenerating}
                  className="w-full"
                  size="lg"
                >
                  {isGenerating ? (
                    <>
                      <LoadingSpinner className="h-4 w-4 mr-2" />
                      Generating Sample...
                    </>
                  ) : (
                    <>
                      <Sparkles className="h-4 w-4 mr-2" />
                      Generate Story Sample
                    </>
                  )}
                </Button>
              </CardContent>
            </Card>
          )}
        </div>

        {/* Right Column - Generated Sample */}
        <div className="space-y-6">
          {isGenerating ? (
            <Card>
              <CardContent className="p-8 text-center">
                <LoadingSpinner className="h-12 w-12 mx-auto mb-4" />
                <h3 className="text-lg font-semibold mb-2">Creating Your Story Sample</h3>
                <p className="text-muted-foreground">
                  Our AI is analyzing your image and creating a personalized story preview...
                </p>
              </CardContent>
            </Card>
          ) : generatedSample ? (
            <div className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Sparkles className="h-5 w-5 text-yellow-500" />
                    Generated Sample
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  {/* Sample Pages */}
                  {generatedSample.samplePages.map((page: any, index: number) => (
                    <div key={page.id} className="border rounded-lg p-4">
                      <div className="text-sm font-medium text-muted-foreground mb-2">
                        {page.type === 'cover' ? 'Cover Page' : `Page ${index}`}
                      </div>
                      <div className="aspect-[4/3] bg-gradient-to-br from-cream to-white rounded border p-4 flex flex-col">
                        {page.imageUrl && (
                          <div className="flex-1 mb-3">
                            <Image 
                              src={page.imageUrl} 
                              alt="Sample page"
                              width={200}
                              height={150}
                              className="w-full h-full object-contain rounded"
                            />
                          </div>
                        )}
                        <div className="text-center">
                          {page.title && (
                            <h3 className="font-bold text-lg mb-1">{page.title}</h3>
                          )}
                          <p className="text-sm text-muted-foreground">{page.text}</p>
                        </div>
                      </div>
                    </div>
                  ))}

                  {/* Next Step CTA */}
                  <Card className="border-green-200 bg-green-50">
                    <CardContent className="p-4 text-center space-y-3">
                      <h3 className="font-semibold text-green-800">Love the sample?</h3>
                      <p className="text-sm text-green-700">
                        {mode === 'ai-assisted' 
                          ? 'Next, choose a theme to customize your story style!'
                          : 'Pay $5 to unlock the full story creation process and generate your complete book!'
                        }
                      </p>
                      <Button onClick={proceedToNextStep} className="w-full">
                        <ArrowRight className="h-4 w-4 mr-2" />
                        {mode === 'ai-assisted' ? 'Choose Theme' : 'Continue for $5'}
                      </Button>
                    </CardContent>
                  </Card>
                </CardContent>
              </Card>
            </div>
          ) : (
            <Card>
              <CardContent className="p-8 text-center">
                <Sparkles className="h-12 w-12 mx-auto mb-4 text-muted-foreground" />
                <h3 className="text-lg font-semibold mb-2">Ready to Generate</h3>
                <p className="text-muted-foreground">
                  Upload an image and describe your story to see a personalized preview
                </p>
              </CardContent>
            </Card>
          )}
        </div>
      </div>
    </div>
  );
}